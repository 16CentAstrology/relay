==================================== INPUT ====================================
//- foo.js
graphql`fragment fooFragment on MyInterface @throwOnFieldError {
  id
  name
}`

/**
 * @RelayResolver ClientUser implements MyInterface
 * A strong type
 */

 /**
  * @RelayResolver ClientUser.name: String
  * Resolver that returns name
  */

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ]
}

//- schema.graphql
type Query {
  greeting: String
}

//- schema-extensions/extension.graphql

interface MyInterface {
  id: ID!
  name: String
}
==================================== OUTPUT ===================================
//- __generated__/ClientUser____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<e5bcef76174321248fffee39e0a71a60>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { ClientUser__id$data } from "ClientUser__id.graphql";
import type { FragmentType } from "relay-runtime";
import {ClientUser as clientUserRelayModelInstanceResolverType} from "foo";
// Type assertion validating that `clientUserRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(clientUserRelayModelInstanceResolverType: (
  id: ClientUser__id$data['id'],
) => mixed);
declare export opaque type ClientUser____relay_model_instance$fragmentType: FragmentType;
export type ClientUser____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof clientUserRelayModelInstanceResolverType>>,
  +$fragmentType: ClientUser____relay_model_instance$fragmentType,
|};
export type ClientUser____relay_model_instance$key = {
  +$data?: ClientUser____relay_model_instance$data,
  +$fragmentSpreads: ClientUser____relay_model_instance$fragmentType,
  ...
};
*/

import ClientUser__id_graphql from 'ClientUser__id.graphql';
import {ClientUser as clientUserRelayModelInstanceResolver} from 'foo';
import {resolverDataInjector} from 'relay-runtime/experimental';

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "ClientUser____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "ClientUser__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": resolverDataInjector(ClientUser__id_graphql, clientUserRelayModelInstanceResolver, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "ClientUser",
  "abstractKey": null
};

export default ((node/*: any*/)/*: Fragment<
  ClientUser____relay_model_instance$fragmentType,
  ClientUser____relay_model_instance$data,
>*/);

//- __generated__/ClientUser__id.graphql.js
/**
 * <auto-generated> SignedSource<<002edcab96dd03234c41444688f0adcf>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type ClientUser__id$fragmentType: FragmentType;
export type ClientUser__id$data = {|
  +id: string,
  +$fragmentType: ClientUser__id$fragmentType,
|};
export type ClientUser__id$key = {
  +$data?: ClientUser__id$data,
  +$fragmentSpreads: ClientUser__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "ClientUser__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "ClientUser",
  "abstractKey": null
};

export default ((node/*: any*/)/*: Fragment<
  ClientUser__id$fragmentType,
  ClientUser__id$data,
>*/);

//- __generated__/fooFragment.graphql.js
/**
 * <auto-generated> SignedSource<<e9be170a9a95b3b5bf9c03d572fde0ba>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type fooFragment$fragmentType: FragmentType;
export type fooFragment$data = {|
  +id: string,
  +name: ?string,
  +$fragmentType: fooFragment$fragmentType,
|};
export type fooFragment$key = {
  +$data?: fooFragment$data,
  +$fragmentSpreads: fooFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": {
    "throwOnFieldError": true
  },
  "name": "fooFragment",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        },
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "name",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "MyInterface",
  "abstractKey": "__isMyInterface"
};

(node/*: any*/).hash = "341471caec4aa8b51553d18075b01d0a";

export default ((node/*: any*/)/*: Fragment<
  fooFragment$fragmentType,
  fooFragment$data,
>*/);
