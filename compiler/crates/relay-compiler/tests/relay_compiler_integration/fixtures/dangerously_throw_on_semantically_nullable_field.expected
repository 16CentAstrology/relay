==================================== INPUT ====================================
//- UserComponent.js
graphql`
  fragment UserComponent on Query {
    me {
      name @required(action: DANGEROUSLY_THROW_ON_SEMANTICALLY_NULLABLE_FIELD)
    }
  }`;

//- relay.config.json
{
   "language": "flow",
   "schema": "./schema.graphql"
}

//- schema.graphql
type Query { me: User }
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/UserComponent.graphql.js
/**
 * <auto-generated> SignedSource<<963892a22437823d67e2611418c0d4d6>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type UserComponent$fragmentType: FragmentType;
export type UserComponent$data = {|
  +me: ?{|
    +name: string,
  |},
  +$fragmentType: UserComponent$fragmentType,
|};
export type UserComponent$key = {
  +$data?: UserComponent$data,
  +$fragmentSpreads: UserComponent$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "UserComponent",
  "selections": [
    {
      "alias": null,
      "args": null,
      "concreteType": "User",
      "kind": "LinkedField",
      "name": "me",
      "plural": false,
      "selections": [
        {
          "kind": "RequiredField",
          "field": {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "name",
            "storageKey": null
          },
          "action": "THROW"
        }
      ],
      "storageKey": null
    }
  ],
  "type": "Query",
  "abstractKey": null
};

(node/*: any*/).hash = "2a578e8053d8cb91950d7cbefc3c3d2a";

export default ((node/*: any*/)/*: Fragment<
  UserComponent$fragmentType,
  UserComponent$data,
>*/);
