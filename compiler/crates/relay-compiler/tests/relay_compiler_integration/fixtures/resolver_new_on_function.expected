==================================== INPUT ====================================
//- User.js
//relay:enable-new-relay-resolver
import type User from 'User';
/**
 * @RelayResolver
 */
export function ClientUser(id: string): User {
  return {id: 1};
}

//- User_bar.js
//relay:enable-new-relay-resolver
import type User from 'User';
/**
 * @RelayResolver
 */
export function bar(user: User): string {
  return "";
}

//- foo.js
graphql`
  fragment foo on ClientUser {
     bar
  }`;

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "featureFlags": {
    "enable_relay_resolver_transform": true,
    "enable_resolver_normalization_ast": true,
    "allow_resolver_non_nullable_return_type": { "kind": "enabled" }
  },
  "resolversSchemaModule": {
    "path": "__generated__/ResolversSchemaModule.js"
  }
}

//- schema.graphql
==================================== OUTPUT ===================================
//- __generated__/ClientUser____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<0e08531a953ad8a29d375ff2b76e4b96>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { ClientUser__id$data } from "ClientUser__id.graphql";
import type { FragmentType } from "relay-runtime";
import {ClientUser as clientUserRelayModelInstanceResolverType} from "User";
// Type assertion validating that `clientUserRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(clientUserRelayModelInstanceResolverType: (
  id: ClientUser__id$data['id'],
) => mixed);
declare export opaque type ClientUser____relay_model_instance$fragmentType: FragmentType;
export type ClientUser____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof clientUserRelayModelInstanceResolverType>>,
  +$fragmentType: ClientUser____relay_model_instance$fragmentType,
|};
export type ClientUser____relay_model_instance$key = {
  +$data?: ClientUser____relay_model_instance$data,
  +$fragmentSpreads: ClientUser____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "ClientUser____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "ClientUser__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('ClientUser__id.graphql'), require('User').ClientUser, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "ClientUser",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  ClientUser____relay_model_instance$fragmentType,
  ClientUser____relay_model_instance$data,
>*/);

//- __generated__/ClientUser__id.graphql.js
/**
 * <auto-generated> SignedSource<<aa138ff9a603134783b8fee0d63fe5d7>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type ClientUser__id$fragmentType: FragmentType;
export type ClientUser__id$data = {|
  +id: string,
  +$fragmentType: ClientUser__id$fragmentType,
|};
export type ClientUser__id$key = {
  +$data?: ClientUser__id$data,
  +$fragmentSpreads: ClientUser__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "ClientUser__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "ClientUser",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  ClientUser__id$fragmentType,
  ClientUser__id$data,
>*/);

//- __generated__/ResolversSchemaModule.js
/**
 * <auto-generated> SignedSource<<c8911a23fcc5bf4d1eaff2d7953cc244>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { SchemaResolvers } from 'ReactiveQueryExecutor';
import type { ResolverFunction, NormalizationSplitOperation } from 'relay-runtime';

*/

var schema_resolvers/*: SchemaResolvers*/ = {
  "ClientUser": {
    "__relay_model_instance": {
      "isNullable": false,
      "resolverFunction": require('User').ClientUser,
      "rootFragment": null
    },
    "bar": {
      "isNullable": false,
      "resolverFunction": require('User_bar').bar,
      "rootFragment": null
    }
  }
};

module.exports = schema_resolvers;

//- __generated__/foo.graphql.js
/**
 * <auto-generated> SignedSource<<7be91b26dbdbe295782832509e8c2edb>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { ClientUser____relay_model_instance$data } from "ClientUser____relay_model_instance.graphql";
import type { FragmentType } from "relay-runtime";
import {bar as clientUserBarResolverType} from "User_bar";
// Type assertion validating that `clientUserBarResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(clientUserBarResolverType: (
  __relay_model_instance: ClientUser____relay_model_instance$data['__relay_model_instance'],
) => string);
declare export opaque type foo$fragmentType: FragmentType;
export type foo$data = {|
  +bar: string,
  +$fragmentType: foo$fragmentType,
|};
export type foo$key = {
  +$data?: foo$data,
  +$fragmentSpreads: foo$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "foo",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "ClientUser____relay_model_instance"
      },
      "kind": "RelayResolver",
      "name": "bar",
      "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('ClientUser____relay_model_instance.graphql'), require('User_bar').bar, '__relay_model_instance', true),
      "path": "bar"
    }
  ],
  "type": "ClientUser",
  "abstractKey": null
};

(node/*: any*/).hash = "26cd70dffc990b7eadce19000110c8d6";

module.exports = ((node/*: any*/)/*: Fragment<
  foo$fragmentType,
  foo$data,
>*/);
