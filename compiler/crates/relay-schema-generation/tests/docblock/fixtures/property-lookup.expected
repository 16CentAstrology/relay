==================================== INPUT ====================================
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

//- module.js

/**
 * @RelayResolver
 */
export type Cat = {
  /**
   * @gqlField
   *
   * This is the full name of the cat
   */
  name: string,
  /**
   * @gqlField
   */
  color: string,
  /**
   * @gqlField
   * @deprecated Just use name instead
   */
  first_name: number,
};
==================================== OUTPUT ===================================
Field(
    TerseRelayResolver(
        TerseRelayResolverIr {
            field: FieldDefinition {
                name: Identifier {
                    span: 311:315,
                    token: Token {
                        span: 311:315,
                        kind: Identifier,
                    },
                    value: "name",
                },
                type_: Named(
                    NamedTypeAnnotation {
                        name: Identifier {
                            span: 317:323,
                            token: Token {
                                span: 317:323,
                                kind: Identifier,
                            },
                            value: "String",
                        },
                    },
                ),
                arguments: None,
                directives: [],
                description: Some(
                    StringNode {
                        token: Token {
                            span: 241:308,
                            kind: Empty,
                        },
                        value: "\nThis is the full name of the cat",
                    },
                ),
                hack_source: None,
                span: 311:315,
            },
            type_: WithLocation {
                location: module.js:231:234,
                item: "Cat",
            },
            root_fragment: None,
            deprecated: None,
            semantic_non_null: Some(
                ConstantDirective {
                    span: 311:315,
                    at: Token {
                        span: 0:0,
                        kind: Empty,
                    },
                    name: Identifier {
                        span: 311:315,
                        token: Token {
                            span: 0:0,
                            kind: Empty,
                        },
                        value: "semanticNonNull",
                    },
                    arguments: None,
                },
            ),
            live: None,
            location: module.js:311:315,
            fragment_arguments: None,
            source_hash: ResolverSourceHash(
                "6f2982bbe6e902610ae23dca6d467ab3",
            ),
            type_confirmed: true,
            is_property_lookup: true,
        },
    ),
)
extend type Cat {
  name: String @relay_resolver(fragment_name: "Cat____relay_model_instance", generated_fragment: true, inject_fragment_data: "__relay_model_instance", is_property_lookup: true, type_confirmed: true, has_output_type: true, import_name: "name", import_path: "module.js") @resolver_source_hash(value: "6f2982bbe6e902610ae23dca6d467ab3") @semanticNonNull
}


Field(
    TerseRelayResolver(
        TerseRelayResolverIr {
            field: FieldDefinition {
                name: Identifier {
                    span: 354:359,
                    token: Token {
                        span: 354:359,
                        kind: Identifier,
                    },
                    value: "color",
                },
                type_: Named(
                    NamedTypeAnnotation {
                        name: Identifier {
                            span: 361:367,
                            token: Token {
                                span: 361:367,
                                kind: Identifier,
                            },
                            value: "String",
                        },
                    },
                ),
                arguments: None,
                directives: [],
                description: None,
                hack_source: None,
                span: 354:359,
            },
            type_: WithLocation {
                location: module.js:231:234,
                item: "Cat",
            },
            root_fragment: None,
            deprecated: None,
            semantic_non_null: Some(
                ConstantDirective {
                    span: 354:359,
                    at: Token {
                        span: 0:0,
                        kind: Empty,
                    },
                    name: Identifier {
                        span: 354:359,
                        token: Token {
                            span: 0:0,
                            kind: Empty,
                        },
                        value: "semanticNonNull",
                    },
                    arguments: None,
                },
            ),
            live: None,
            location: module.js:354:359,
            fragment_arguments: None,
            source_hash: ResolverSourceHash(
                "6f2982bbe6e902610ae23dca6d467ab3",
            ),
            type_confirmed: true,
            is_property_lookup: true,
        },
    ),
)
extend type Cat {
  color: String @relay_resolver(fragment_name: "Cat____relay_model_instance", generated_fragment: true, inject_fragment_data: "__relay_model_instance", is_property_lookup: true, type_confirmed: true, has_output_type: true, import_name: "color", import_path: "module.js") @resolver_source_hash(value: "6f2982bbe6e902610ae23dca6d467ab3") @semanticNonNull
}


Field(
    TerseRelayResolver(
        TerseRelayResolverIr {
            field: FieldDefinition {
                name: Identifier {
                    span: 437:447,
                    token: Token {
                        span: 437:447,
                        kind: Identifier,
                    },
                    value: "first_name",
                },
                type_: Named(
                    NamedTypeAnnotation {
                        name: Identifier {
                            span: 449:455,
                            token: Token {
                                span: 449:455,
                                kind: Identifier,
                            },
                            value: "Float",
                        },
                    },
                ),
                arguments: None,
                directives: [],
                description: None,
                hack_source: None,
                span: 437:447,
            },
            type_: WithLocation {
                location: module.js:231:234,
                item: "Cat",
            },
            root_fragment: None,
            deprecated: Some(
                PopulatedIrField(
                    PopulatedIrField {
                        key_location: module.js:23:33,
                        value: WithLocation {
                            location: module.js:34:55,
                            item: "Just use name instead",
                        },
                    },
                ),
            ),
            semantic_non_null: Some(
                ConstantDirective {
                    span: 437:447,
                    at: Token {
                        span: 0:0,
                        kind: Empty,
                    },
                    name: Identifier {
                        span: 437:447,
                        token: Token {
                            span: 0:0,
                            kind: Empty,
                        },
                        value: "semanticNonNull",
                    },
                    arguments: None,
                },
            ),
            live: None,
            location: module.js:437:447,
            fragment_arguments: None,
            source_hash: ResolverSourceHash(
                "6f2982bbe6e902610ae23dca6d467ab3",
            ),
            type_confirmed: true,
            is_property_lookup: true,
        },
    ),
)
extend type Cat {
  first_name: Float @relay_resolver(fragment_name: "Cat____relay_model_instance", generated_fragment: true, inject_fragment_data: "__relay_model_instance", is_property_lookup: true, type_confirmed: true, has_output_type: true, import_name: "first_name", import_path: "module.js") @resolver_source_hash(value: "6f2982bbe6e902610ae23dca6d467ab3") @deprecated(reason: "Just use name instead") @semanticNonNull
}


Type(
    WeakObjectType(
        WeakObjectIr {
            type_name: Identifier {
                span: 231:234,
                token: Token {
                    span: 231:234,
                    kind: Identifier,
                },
                value: "Cat",
            },
            rhs_location: module.js:231:234,
            description: None,
            hack_source: None,
            deprecated: None,
            location: module.js:231:234,
            implements_interfaces: [],
            source_hash: ResolverSourceHash(
                "6f2982bbe6e902610ae23dca6d467ab3",
            ),
            type_confirmed: true,
        },
    ),
)
scalar CatModel @__RelayCustomScalar(path: "module.js", export_name: "Cat")


type Cat @__RelayResolverModel @RelayOutputType @__RelayWeakObject {
  __relay_model_instance: CatModel! @resolver_source_hash(value: "6f2982bbe6e902610ae23dca6d467ab3") @unselectable(reason: "This field is intended only for Relay's internal use")
}
